#!/usr/bin/env ruby

# Copyright, 2012, by Samuel G. D. Williams. <http://www.codeotaku.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require_relative '../lib/teapot/command'

if command = Teapot::Command.parse(ARGV)
	logger = command.logger

	begin
		command.invoke
	rescue Teapot::IncompatibleTeapotError => error
		logger.error(command, error) do
			"Supported minimum version #{Teapot::MINIMUM_LOADER_VERSION.dump} to #{Teapot::LOADER_VERSION.dump}."
		end
		
		exit 1
	rescue Build::Dependency::UnresolvedDependencyError => error
		logger.error(command, error) do |buffer|
			buffer.puts "Unresolved dependencies:"

			error.chain.unresolved.each do |name, parent|
				buffer.puts "#{parent} depends on #{name.inspect}"
			
				conflicts = error.chain.conflicts[name]
			
				if conflicts
					conflicts.each do |conflict|
						buffer.puts " - provided by #{conflict.name}"
					end
				end
			end

			buffer.puts "Cannot continue due to unresolved dependencies!".color(:red)
		end
		
		exit 2
	rescue StandardError => error
		logger.error(command, error)
		
		exit 3
	end
end
